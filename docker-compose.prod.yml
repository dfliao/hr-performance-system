version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: hr_performance_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hr_performance}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      TZ: Asia/Taipei
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hr_performance}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hr_performance_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hr_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        ENV: production
    container_name: hr_performance_backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/${POSTGRES_DB:-hr_performance}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-change_this_redis_password}@redis:6379/0
      
      # LDAP Configuration
      LDAP_SERVER_URL: ${LDAP_SERVER_URL:-ldap://192.168.1.100:389}
      LDAP_BASE_DN: ${LDAP_BASE_DN:-dc=gogopeaks,dc=com}
      LDAP_BIND_DN: ${LDAP_BIND_DN:-cn=admin,dc=gogopeaks,dc=com}
      LDAP_BIND_PASSWORD: ${LDAP_BIND_PASSWORD}
      
      # JWT Configuration
      SECRET_KEY: ${SECRET_KEY:-change_this_secret_key_in_production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      
      # File Storage
      SYNOLOGY_DRIVE_PATH: ${SYNOLOGY_DRIVE_PATH:-/volume1/hr-evidence}
      SYNOLOGY_DRIVE_URL: ${SYNOLOGY_DRIVE_URL:-https://drive.gogopeaks.com}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_EXTENSIONS: ${ALLOWED_FILE_EXTENSIONS:-jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx,ppt,pptx,txt,zip,rar}
      
      # External APIs
      REDMINE_URL: ${REDMINE_URL:-https://redmine.gogopeaks.com}
      REDMINE_API_KEY: ${REDMINE_API_KEY}
      CHAT_WEBHOOK_URL: ${CHAT_WEBHOOK_URL}
      
      # Application Settings
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://hr.gogopeaks.com}
      
      # Timezone
      TZ: Asia/Taipei
    volumes:
      - ${SYNOLOGY_DRIVE_PATH:-./data/uploads}:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8004:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Vue.js Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8004}
        VITE_SYNOLOGY_DRIVE_URL: ${SYNOLOGY_DRIVE_URL:-https://drive.gogopeaks.com}
        VITE_REDMINE_URL: ${REDMINE_URL:-https://redmine.gogopeaks.com}
        VITE_APP_TITLE: "HR 績效管理系統"
    container_name: hr_performance_frontend
    restart: unless-stopped
    ports:
      - "3004:80"
    depends_on:
      - backend
    networks:
      - hr_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: hr_performance_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - hr_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16